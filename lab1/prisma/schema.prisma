generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  password       String
  role           UserRole  @default(USER)
  refreshToken   String?
  avatar         String?
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  cards              Card[]        // карти, якими володіє користувач
  collections        Collection[]   // колекції користувача
  boughtTransactions Transaction[] @relation("Buyer") // транзакції, де користувач покупець
  soldTransactions   Transaction[] @relation("Seller") // транзакції, де користувач продавець
  uploadedFiles      File[]        // завантажені користувачем файли
}

model File {
  id           Int      @id @default(autoincrement())
  filename     String   // Згенерована назва файлу
  originalName String   // Оригінальна назва файлу
  mimetype     String   // Тип файлу (image/jpeg, etc.)
  size         Int      // Розмір в байтах
  path         String   // Шлях до файлу
  uploadedBy   Int      // ID користувача, який завантажив
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

model Collection {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  userId      Int

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards Card[] @relation("CollectionToCard")
}

model Card {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  rarity      String
  imageUrl    String?
  ownerId     Int
  createdAt   DateTime @default(now())

  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collections  Collection[]  @relation("CollectionToCard")
  transactions Transaction[] // всі транзакції цієї карти
}

model Transaction {

model Collection {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  userId      Int

  user  User   @relation(fields: [userId], references: [id])
  cards Card[] @relation("CollectionToCard")
}

model Card {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  rarity      String
  imageUrl    String?
  ownerId     Int
  createdAt   DateTime @default(now())

  owner        User          @relation(fields: [ownerId], references: [id])
  collections  Collection[]  @relation("CollectionToCard")
  transactions Transaction[] // всі транзакції цієї карти
}

model Transaction {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  sellerId  Int
  cardId    Int
  price     Float
  createdAt DateTime @default(now())

  buyer  User @relation("Buyer", fields: [buyerId], references: [id])
  seller User @relation("Seller", fields: [sellerId], references: [id])
  card   Card @relation(fields: [cardId], references: [id])
}
